switch operating-system
case 'linux
    shared-library "libsljit.so"
case 'windows
    shared-library "sljit.dll"
default
    error "Unsupported OS"

using import radl.foreign
using import enum

foreign
    include "sljitLir.h"
    with-constants {
        SLJIT_S0 SLJIT_S1 SLJIT_S2 SLJIT_S3 SLJIT_S4 SLJIT_S5 SLJIT_S6 SLJIT_S7 SLJIT_S8 SLJIT_S9
        SLJIT_FIRST_SAVED_REG SLJIT_SP
        SLJIT_FS0 SLJIT_FS1 SLJIT_FS2 SLJIT_FS3 SLJIT_FS4 SLJIT_FS5 SLJIT_FIRST_SAVED_FLOAT_REG
        SLJIT_ARG_TYPE_W_R SLJIT_ARG_TYPE_32_R SLJIT_ARG_TYPE_P_R
        SLJIT_BREAKPOINT SLJIT_NOP SLJIT_LMUL_UW SLJIT_LMUL_SW
        SLJIT_DIVMOD_UW SLJIT_DIVMOD_U32 SLJIT_DIVMOD_SW SLJIT_DIVMOD_S32
        SLJIT_DIV_UW SLJIT_DIV_U32 SLJIT_DIV_SW SLJIT_DIV_S32 SLJIT_ENDBR
        SLJIT_SKIP_FRAMES_BEFORE_RETURN
        SLJIT_MOV SLJIT_MOV_U8 SLJIT_MOV32_U8 SLJIT_MOV_S8 SLJIT_MOV32_S8 SLJIT_MOV_U16
        SLJIT_MOV32_U16 SLJIT_MOV_S16 SLJIT_MOV32_S16 SLJIT_MOV_U32 SLJIT_MOV_S32 SLJIT_MOV32 SLJIT_MOV_P
        SLJIT_CLZ SLJIT_CLZ32 SLJIT_CTZ SLJIT_CTZ32
        SLJIT_REV SLJIT_REV32 SLJIT_REV_U16 SLJIT_REV32_U16
        SLJIT_REV_S16 SLJIT_REV32_S16 SLJIT_REV_U32 SLJIT_REV_S32
        SLJIT_ADD SLJIT_ADD32 SLJIT_ADDC SLJIT_ADDC32
        SLJIT_SUB SLJIT_SUB32 SLJIT_SUBC SLJIT_SUBC32 SLJIT_MUL
        SLJIT_MUL32 SLJIT_AND SLJIT_AND32 SLJIT_OR SLJIT_OR32 SLJIT_XOR SLJIT_XOR32 SLJIT_SHL SLJIT_SHL32
        SLJIT_MSHL SLJIT_MSHL32 SLJIT_LSHR SLJIT_LSHR32 SLJIT_MLSHR SLJIT_MLSHR32 SLJIT_ASHR SLJIT_ASHR32 SLJIT_MASHR SLJIT_MASHR32
        SLJIT_ROTL SLJIT_ROTL32 SLJIT_ROTR SLJIT_ROTR32 SLJIT_FAST_RETURN SLJIT_FAST_ENTER
        SLJIT_SKIP_FRAMES_BEFORE_FAST_RETURN
        SLJIT_PREFETCH_L1 SLJIT_PREFETCH_L2 SLJIT_PREFETCH_L3 SLJIT_PREFETCH_ONCE
        SLJIT_GET_RETURN_ADDRESS SLJIT_MOV_F64 SLJIT_MOV_F32
        SLJIT_CONV_F64_FROM_F32 SLJIT_CONV_F32_FROM_F64 SLJIT_CONV_SW_FROM_F64 SLJIT_CONV_SW_FROM_F32
        SLJIT_CONV_S32_FROM_F64 SLJIT_CONV_S32_FROM_F32 SLJIT_CONV_F64_FROM_SW SLJIT_CONV_F32_FROM_SW
        SLJIT_CONV_F64_FROM_S32 SLJIT_CONV_F32_FROM_S32
        SLJIT_CONV_F64_FROM_UW SLJIT_CONV_F32_FROM_UW SLJIT_CONV_F64_FROM_U32 SLJIT_CONV_F32_FROM_U32
        SLJIT_CMP_F64 SLJIT_CMP_F32 SLJIT_NEG_F64 SLJIT_NEG_F32 SLJIT_ABS_F64 SLJIT_ABS_F32
        SLJIT_ADD_F64 SLJIT_ADD_F32 SLJIT_SUB_F64 SLJIT_SUB_F32 SLJIT_MUL_F64 SLJIT_MUL_F32
        SLJIT_DIV_F64 SLJIT_DIV_F32 SLJIT_COPY32_TO_F32 SLJIT_COPY32_FROM_F32
        SLJIT_SET_LESS SLJIT_SET_GREATER_EQUAL SLJIT_SET_GREATER SLJIT_SET_LESS_EQUAL SLJIT_SET_SIG_LESS
        SLJIT_SET_SIG_GREATER_EQUAL SLJIT_SET_SIG_GREATER SLJIT_SET_SIG_LESS_EQUAL SLJIT_SET_OVERFLOW
        SLJIT_SET_CARRY SLJIT_SET_ATOMIC_STORED SLJIT_SET_F_EQUAL
        SLJIT_SET_F_NOT_EQUAL SLJIT_SET_F_LESS SLJIT_SET_F_GREATER_EQUAL SLJIT_SET_F_GREATER SLJIT_SET_F_LESS_EQUAL
        SLJIT_SET_UNORDERED SLJIT_SET_ORDERED SLJIT_SET_ORDERED_EQUAL SLJIT_SET_UNORDERED_OR_NOT_EQUAL
        SLJIT_SET_ORDERED_LESS SLJIT_SET_UNORDERED_OR_GREATER_EQUAL SLJIT_SET_ORDERED_GREATER
        SLJIT_SET_UNORDERED_OR_LESS_EQUAL SLJIT_SET_UNORDERED_OR_EQUAL SLJIT_SET_ORDERED_NOT_EQUAL
        SLJIT_SET_UNORDERED_OR_LESS SLJIT_SET_ORDERED_GREATER_EQUAL SLJIT_SET_UNORDERED_OR_GREATER SLJIT_SET_ORDERED_LESS_EQUAL
    }
    export from {extern struct typedef} matching "^sljit_"
    export from {define} matching "^(?=SLJIT_)"
    appending
        SLJIT_R := (i) -> (1 + i)
        SLJIT_S := (i) -> (SLJIT_NUMBER_OF_REGISTERS - i)
        SLJIT_FR := (i) -> (1 + i)
        SLJIT_FS := (i) -> (SLJIT_NUMBER_OF_FLOAT_REGISTERS - i)
        SLJIT_ARG_RETURN := (type_) -> type_
        SLJIT_ARG_VALUE := (type_ idx) -> (type_ << (idx * SLJIT_ARG_SHIFT))
        SLJIT_ENTER_KEEP := (n) -> n
        SLJIT_MEM0 := () -> SLJIT_MEM
        SLJIT_MEM1 := (r1) -> (SLJIT_MEM | r1)
        SLJIT_MEM2 := (r1 r2) -> (SLJIT_MEM | r1 | (r2 << 8))
        SLJIT_REG_PAIR := (r1 r2) -> (r1 | (r2 << 8))
        SLJIT_IS_REG := (arg) -> (arg > 0 and arg < SLJIT_IMM)
        SLJIT_IS_MEM  := (arg) -> (arg & SLJIT_MEM)
        SLJIT_IS_MEM0 := (arg) -> (arg == SLJIT_MEM)
        SLJIT_IS_MEM1 := (arg) -> (arg > SLJIT_MEM and arg < (SLJIT_MEM + SLJIT_IMM))
        SLJIT_IS_MEM2 := (arg) -> ((arg & SLJIT_MEM) and arg >= (SLJIT_MEM << 1))
        SLJIT_IS_IMM  := (arg) -> (arg == SLJIT_IMM)
        SLJIT_IS_REG_PAIR := (arg) -> ((arg >> 8) != 0)
        SLJIT_SET := (condition) -> (condition << 10)
